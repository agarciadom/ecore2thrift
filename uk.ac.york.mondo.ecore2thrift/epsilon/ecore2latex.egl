[% import 'utilities.egl'; %]
% WARNING: This is an auto-generated file. Do not modify manually.
\makeatletter
  \newcommand{\camelhyph}[1]{\@fterfirst\c@amelhyph#1\relax }
  \def\@fterfirst #1#2{#2#1}
  \def\c@amelhyph #1{%
   \ifthenelse{\equal{#1}\relax}{}{%  Do nothing if the end has been reached
     \ifnum`#1<91 \-#1\else#1\fi%     Check whether #1 is an uppercase letter,
                                %     if so, print \-#1, otherwise #1
    \expandafter\c@amelhyph%    %     insert \c@amelhyph again.
}}
\makeatother

\newcommand{\camelcase}[1]{\camelhyph{#1}\xspace}

\subsection{Services}
\label{sec:services}

[%=EPackage.all.first.getAnnotationValue("doc", "dServices")%]

[%for (c in getAllServiceClasses()) { %]
\subsubsection{[%=c.name%]}
\label{sec:[%=c.name%]}
[%=c.getDoc()%]

[%for (op in c.eOperations) { %]
\begin{longtable} {|p{2cm}|p{3.5cm}|p{2.5cm}|p{6.5cm}|}
	\caption{Operation [%=c.name%].[%=op.name%]}
	\label{tab:[%=c.name.ftlc()%]-[%=op.name%]}\\
	\cline{2-4}%
	\multicolumn{1}{c|}{} & \textbf{Name} & \textbf{Type} & \textbf{Documentation} \\\hline 
	\textbf{Operation} & \camelcase{[%=op.name%]} & \camelcase{[%=op.getType()%]} & [%=op.getDoc()%] \\\hline
	\textbf{Parameters} & \multicolumn{3}{l|}{[% if (op.eParameters.isEmpty) { out.print("None."); } %]} \\\hline
	[%for (p in op.eParameters) { %]
	 & [%=p.name.escapeLaTeX()%] [%=p.getOptional()%]& \camelcase{[%=p.getType()%]} & [%=p.getDoc()%] \\\hline 
	[%}
	if (op.eExceptions.size > 0) { %]
	\textbf{Exceptions} & \multicolumn{3}{l|}{} \\\hline
	[% for (e in op.eExceptions) { %]
	 & \camelcase{[%=e.name.escapeLaTeX()%]} & \multicolumn{2}{p{8.5cm}|}{[%=e.getDoc()%]} \\\hline 
	[% }
	} %]
\end{longtable}
[%}%]

[%}%]

\subsection{Entities}
\label{sec:entities}
[%for (c in getAllEntityClasses()) { %]
\subsubsection{[%=c.name%]}

[% describeEntity(c); %]

[%} /* for (c in EClass... */ %]

[% var enums = getAllEnums(); if (enums.size() > 0) { %]

\subsection{Enumerations}
\label{sec:enumerations}
[% for (c in enums) { %]
\subsubsection{[%=c.name%]}

\begin{longtable} {|p{4cm}|p{10.5cm}|}
	\caption{Enumeration [%=c.name%]}
	\label{tab:[%=c.name.ftlc()%]}\\
	\hline%
	\textbf{Name} & \textbf{Documentation} \\\hline 
	[% for (l in c.eLiterals.sortBy(l|l.name)) { %]
		[%=l.name.escapeLaTeX()%] & [%=l.getDoc()%] \\\hline 
	[% } %]
	[%=c.getUsedIn()%]
\end{longtable}

[% } /* for (c in EClass... */
} /* if (EEnum... */

var exceptions = getAllExceptions();
if (exceptions.size() > 0) {
%]
\subsection{Exceptions}
\label{sec:exceptions}
[% for (c in exceptions) { %]
\subsubsection{[%=c.name%]}
[% describeEntity(c); %]
[% } /* for */
} /* if (exceptions ... */

operation String escapeLaTeX() {
  return self.replaceAll("_", "\\\\_");
}

operation EClassifier getUsedIn() : String {
  var usedIn = self.usedIn();
  if (usedIn.size() > 0) {
    var columns = 3;
    if (self.isKindOf(EEnum)) {
      columns = 2;
    }
	%]\multicolumn{[%=columns%]}{|p{.95\linewidth}|}{\textbf{Used in:} [%=usedIn.concat(", ")%]} \\\hline[%
  }
}

$pre self.eAllStructuralFeatures.contains(sf)
operation EClassifier getInherited(sf: EStructuralFeature) : String {
  if (self.eStructuralFeatures.contains(sf)) {
    return "";
  } else {
    return " (\\nohyphens{inherited})";
  }
}

operation String ftlc() : String {
  return self.characterAt(0).toLowerCase() + self.substring(1);
}

/*
 * Generates LaTeX code for an entity or an exception.
 */
operation describeEntity(c: EClass) {
  out.println(c.getDoc());
  out.println();

  if (c.eAllSuperTypes.size() > 0) {
    out.print("\\emph{Inherits from}: " + c.eAllSuperTypes.collect(t|t.name).concat(", ") + ".\n\n");
  }

  var subtypes = EClass.all.select(k|k.eSuperTypes.contains(c));
  if (subtypes.size() > 0) {
    out.print("\\emph{Inherited by}: " + subtypes.collect(t|t.name).concat(", ") + ".\n\n");
  }
%]
\begin{longtable} {|p{4cm}|p{4cm}|p{7.25cm}|}
	\caption{[%=c.getEntityType() + ' ' + c.name%]}
	\label{tab:[%=c.name.ftlc()%]}\\
	\hline%
	\textbf{Field} & \textbf{Type} & \textbf{Documentation} \\\hline
	[%
	  if (c.eAllStructuralFeatures.size() > 0) {
	    for (sf in c.eAllStructuralFeatures.sortBy(f|f.name)) { %]
		  \camelcase{[%=sf.name.escapeLaTeX()%]} [%=c.getInherited(sf)%] & \camelcase{[%=sf.getType()%]} [%=sf.getOptional()%] & [%=sf.getDoc()%] \\\hline
	 [% }
	  } else { %]
	    --- & --- & --- \\\hline
   [% } %]
   [%=c.getUsedIn()%]
\end{longtable}
[%  
}
%]