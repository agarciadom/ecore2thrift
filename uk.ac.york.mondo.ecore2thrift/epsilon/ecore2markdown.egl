[% import 'utilities.egl'; %]
[%=EPackage.all.first.getAnnotationValue("doc", "dServices")%]

## Services
[% for (c in EClass.all.select(c|not c.eOperations.isEmpty()).sortBy(c|c.name)) { %]

### [%=c.name%]

[%=c.getDoc()%]

[%   for (op in c.eOperations) { %]

#### [%=c.name%].[%=op.name%] ####

[%=op.getDoc()%]

Returns `[%=op.getType()%]`. [%
       if (op.eParameters.isEmpty) { %] Does not take any parameters. [% } else { %] Takes these parameters:

| Name | Type | Documentation |
| ---- | ---- | ------------- |
[%       for (p in op.eParameters) { %]
| [%=p.name%] [%=p.getOptional()%] | [%=p.getType()%] | [%=p.getDoc().strip()%] | 
[%       }
       }

       if (op.eExceptions.size > 0) { %]

May throw these exceptions:

| Name | Documentation |
| ---- | ------------- |
[%       for (e in op.eExceptions) { %]
| [%=e.name%] | [%=e.getDoc().strip() %] |
[%       }
       }
     }
   }
%]

## Entities

[% for (c in EClass.all.select(c|c.eOperations.isEmpty() and not c.isExcluded() and not c.isException()).sortBy(c|c.name)) { %]

### [%=c.name%] ###

[% describeEntity(c);
} /* for (c in EClass... */

if (EEnum.all.size() > 0) { %]

## Enumerations
[% for (c in EEnum.all.select(c|not c.isExcluded()).sortBy(c|c.name)) { %]

### [%=c.name%] ###

[%=c.getDoc()%]

| Name | Documentation |
| ---- | ------------- |
[% for (l in c.eLiterals.sortBy(l|l.name)) { %]
| [%=l.name%] | [%=l.getDoc().strip() %] | 
[% }
 } /* for (c in EClass... */
} /* if (EEnum... */

var exceptions = EClass.all.select(c|c.eOperations.isEmpty() and not c.isExcluded() and c.isException()).sortBy(c|c.name);
if (exceptions.size() > 0) {
%]
## Exceptions

[% for (c in exceptions) { %]

### [%=c.name%] ###
[% describeEntity(c); %]
[% } /* for */
} /* if (exceptions ... */

%]

---

This file was automatically generated by Ecore2Thrift.

  https://github.com/bluezio/ecore2thrift

[%

operation describeEntity(c: EClass) {
  out.println(c.getDoc());
  out.println();

  if (c.eAllSuperTypes.size() > 0) {
    out.print("Inherits from: " + c.eAllSuperTypes.collect(t|t.name).concat(", ") + ".\n\n");
  }

  var subtypes = EClass.all.select(k|k.eSuperTypes.contains(c));
  if (subtypes.size() > 0) {
    out.print("Inherited by: " + subtypes.collect(t|t.name).concat(", ") + ".\n\n");
  }
  if (c.eAllStructuralFeatures.size() > 0) {
    out.print('\n| Name | Type | Documentation |\n| ---- | ---- | ------------- |\n');
    for (sf in c.eAllStructuralFeatures.sortBy(f|f.name)) { %]
| [%=sf.name%][%=c.getInherited(sf)%][%=sf.getOptional()%] | [%=sf.getType()%] | [%=sf.getDoc().strip()%] |
 [% } %]

[%
  } else { %]No fields for this entity.

[% }
 out.println(c.getUsedIn());
}

$pre self.eAllStructuralFeatures.contains(sf)
operation EClassifier getInherited(sf: EStructuralFeature) : String {
  if (self.eStructuralFeatures.contains(sf)) {
    return "";
  } else {
    return " (inherited)";
  }
}

operation EClassifier getUsedIn() : String {
  var usedIn = self.usedIn();
  if (usedIn.isEmpty) {
    return '';
  } else {
    return 'Used in: ' + usedIn.concat(", ") + "."; 
  }
}

operation String strip() : String {
  return self.replaceAll('\\s+', ' ').trim();
}

%]