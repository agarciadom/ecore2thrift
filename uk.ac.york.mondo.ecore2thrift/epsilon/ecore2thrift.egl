[% import 'utilities.egl'; %]
namespace java [%=EPackage.all.first.getJavaNamespace()%]

[% for (c in getAllEnums()) { %]
enum [%=c.name%] {
	[% for (l in c.eLiterals.sortBy(l|l.name)) { %]
		/* [%=l.getDoc()%] */ [%=l.name%] 
	[% } %]
}

[% } /* for (c in EClass... */ %]

[% for (c in getAllDataClasses().sortBy(c| c.computeDepth())) { %]
[%=c.getEntityThriftKeyword()%] [%=c.name %] {
[% describeEntity(c); %]
}

[%} /* for (c in EClass... */

for (c in getAllServiceClasses()) { %]
/* [%=c.getDoc()%] */
service [%=c.name%] {
  [% for (op in c.eOperations) { %]
  /* [%= op.getDoc() %] Auth needed: [%=op.getAuth()%] */
  [%= op.getType() + ' ' + op.name %](
  [%  
    var iParameter = 1;
    for (p in op.eParameters) { 
    	if (p.getNum() > iParameter) {
    		iParameter = p.getNum();
    	}
    	%]
	/* [%=p.getDoc()%] */ [%=iParameter%]: [%=p.getOptional(false)%] [%=p.getType()%] [%=p.name %][%=p.getDefault()%],
  [%
    iParameter = iParameter + 1;
  }
  %]
  )
  [%
  if (op.eExceptions.size > 0) { %]
  throws (
	[%
	iParameter = 1; 
	for (e in op.eExceptions) { 
		if (e.getNum() > iParameter) {
			iParameter = e.getNum();
		}%]
	[%=iParameter%]: [%=e.name%] err[%=iParameter%] /* [%=e.getDoc()%] */ 
	[%
	iParameter = iParameter + 1; 
	} /* for (e...) */ %]
	) 
	[%
	} /* if (op...) */ %]
	
	[%
} /* for (op...) */ %]
}

[%} /* for (c in EClass) */

/*
 * Generates Thrift code for an entity or an exception.
 */
operation describeEntity(c: EClass) {
    describeEntityFields(c, 1);
}

operation describeEntityFields(c: EClass, iParameter: Integer): Integer {
	for (sf in c.eAllStructuralFeatures) {
		if (sf.getNum() > iParameter) {
			iParameter = sf.getNum();
		}
		if (sf.isMerged()) {
			iParameter = describeEntityFields(sf.eType, iParameter);
		} else {
   %]
	 /* [%=sf.getDoc()%] */ [%=iParameter%]: [%=sf.getOptional(c.isUnion()) %] [%=sf.getType()%] [%=sf.name%][%=sf.getDefault()%],
[% iParameter = iParameter + 1;
		}
	}
	return iParameter;
}
 %]